version: "3.8"

services:
    caddy:
        image: caddy:2.8
        container_name: caddy
        ports:
            - "8090:8090"
        volumes:
            - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro
        depends_on:
            - geth
        networks:
            - geth-network
    sc-deployment-server:
        image: caddy:2.8
        container_name: sc-deployment-server
        ports:
            - "8091:8081"
        volumes:
            - ./sc-deployment-server/Caddyfile:/etc/caddy/Caddyfile:ro
            - ./sc-deployer:/artifacts:ro
        depends_on:
            - sc-deployer
        networks:
            - geth-network
    # ngrok:
    sc-deployer:
        # Error invoking remote method 'docker-start-container': Error: (HTTP code 400) unexpected - failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: exec: "/bin/bash": stat /bin/bash: no such file or directory: unknown
        image: ghcr.io/foundry-rs/foundry:latest
        platform: linux/amd64
        container_name: sc-deployer
        volumes:
            - ./sc-deployer:/workspace
            - ./geth-init:/shared
        working_dir: /workspace
        entrypoint: [ "/bin/sh", "/workspace/entrypoint.sh" ]
        depends_on:
            - geth
        networks:
            - geth-network
    # sc-deployment-server:
    geth:
        image: ethereum/client-go:v1.15.0
        container_name: geth
        ports:
            - "8545:8545" # HTTP RPC
            - "8546:8546" # WebSocket RPC
            - "30303:30303" # P2P
            - "30303:30303/udp" # P2P UDP
        volumes:
            - geth-data:/root/.ethereum
            - ./geth:/geth
        command: >
            --dev --datadir /root/.ethereum --http --http.addr 0.0.0.0 --http.port 8545 --http.corsdomain "*" --http.vhosts "*" --http.api "eth,net,web3,personal,miner,admin,debug" --ws --ws.addr 0.0.0.0 --ws.port 8546 --ws.api "eth,net,web3,personal,miner,admin,debug" --ws.origins "*" --allow-insecure-unlock --mine --networkid 1337 --nodiscover --verbosity 3 --miner.gaslimit 8000000
        restart: unless-stopped
        networks:
            - geth-network
    geth-init:
        image: ethereum/client-go:v1.15.0
        container_name: geth-init
        volumes:
            - ./geth-init:/scripts
            - geth-data:/root/.ethereum
            - ./geth-init:/shared
        entrypoint: [ "/bin/sh", "/scripts/entrypoint.sh" ]
        depends_on:
            - geth
        networks:
            - geth-network
    graph-ipfs:
        image: ipfs/go-ipfs:v0.14.0
        container_name: graph-ipfs
        ports:
            - "5001:5001" # IPFS API
            - "4001:4001" # IPFS Gateway
        volumes:
            - graph-ipfs-data:/data/ipfs
        environment:
            - IPFS_PROFILE=server
        command: daemon --migrate=true --agent-version-suffix=docker
        networks:
            - geth-network

    graph-postgres:
        image: postgres:13
        container_name: graph-postgres
        ports:
            - "5433:5432"
        environment:
            POSTGRES_USER: graph-node
            POSTGRES_PASSWORD: let-me-in
            POSTGRES_DB: graph-node
            POSTGRES_INITDB_ARGS: "--locale=C --encoding=UTF8"
        volumes:
            - graph-postgres-data:/var/lib/postgresql/data
        networks:
            - geth-network

    graph-redis:
        image: redis:6-alpine
        container_name: graph-redis
        ports:
            - "6380:6379"
        volumes:
            - graph-redis-data:/data
        command: redis-server --appendonly yes
        networks:
            - geth-network

    graph-node:
        image: graphprotocol/graph-node:latest
        platform: linux/amd64
        container_name: graph-node
        ports:
            - "8000:8000" # GraphQL HTTP server
            - "8001:8001" # GraphQL WebSocket server
            - "8020:8020" # JSON-RPC admin server
            - "8030:8030" # Subgraph indexing status API
            - "8040:8040" # Metrics server
        environment:
            postgres_host: graph-postgres
            postgres_port: 5432
            postgres_user: graph-node
            postgres_pass: let-me-in
            postgres_db: graph-node
            ipfs: graph-ipfs:5001
            ethereum: 'geth:http://geth:8545'
            GRAPH_LOG: info
        depends_on:
            - graph-postgres
            - graph-redis
            - graph-ipfs
            - geth
        networks:
            - geth-network
    # blockscout: should be another docker-compose.yml file from https://github.com/blockscout/blockscout/tree/master/docker-compose. Don't create a container in this file.

volumes:
    geth-data:
    graph-ipfs-data:
    graph-postgres-data:
    graph-redis-data:


networks:
    geth-network:
        driver: bridge
